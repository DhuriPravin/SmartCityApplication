/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.PermanentHousing;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Listings.HouseListings;
import Business.Organization.Organization;
import Business.Organization.PermHousingOrganization;
import Business.UserAccount.UserAccount;
import Business.Citizen.CitizensDirectory;
import Business.WorkQueue.PermHousingRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.SystemAdminWorkArea.ViewAllCitizens;
//import userinterface.LabAssistantRole.ProcessLabWorkRequestJPanel;

/**
 *
 * @author pravin
 */
public class PermHousingWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel processContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private final Organization permHousingOrganization;
    private CitizensDirectory cd;
    private Enterprise enterprise;

    /**
     * Creates new form PermHousingWorkAreaJPanel
     */
    public PermHousingWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization permHousingOrganization, Enterprise enterprise, CitizensDirectory cd, EcoSystem business) {
        initComponents();
        this.processContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.permHousingOrganization = (PermHousingOrganization) permHousingOrganization;
        this.enterprise = enterprise;
        this.cd = cd;
        int availability = business.getHld().getTotal_count();
        for (HouseListings hs : business.getHld().getHouseListing_Dir()) {
            if (hs.getAvailability() == 1) {
                availability = availability - 1;
            }
        }
        AvailableHousesText.setText(Integer.toString(availability));
        populateTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        refreshJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        addpermhousingjButton = new javax.swing.JButton();
        AvailableHousesText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtTotalRequests = new javax.swing.JLabel();
        txtAccepted = new javax.swing.JLabel();
        txtRejected = new javax.swing.JLabel();
        txtPending = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtTotalRequests1 = new javax.swing.JLabel();
        txtAccepted1 = new javax.swing.JLabel();
        txtRejected1 = new javax.swing.JLabel();
        txtPending1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtWelcome = new javax.swing.JLabel();
        btnViewAllVeterans = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        refreshJButton.setBackground(new java.awt.Color(0, 0, 0));
        refreshJButton.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        refreshJButton.setForeground(new java.awt.Color(255, 255, 255));
        refreshJButton.setText("Refresh");
        refreshJButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 250, 150, 90));

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Receiver", "Area", "City", "Door Number", "Pin Code", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 460, 700, 90));

        assignJButton.setBackground(new java.awt.Color(0, 0, 0));
        assignJButton.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        assignJButton.setForeground(new java.awt.Color(255, 255, 255));
        assignJButton.setText("Assign to me");
        assignJButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 570, 260, 30));

        processJButton.setBackground(new java.awt.Color(0, 0, 0));
        processJButton.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        processJButton.setForeground(new java.awt.Color(255, 255, 255));
        processJButton.setText("Process");
        processJButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 250, 140, 90));

        addpermhousingjButton.setBackground(new java.awt.Color(0, 0, 0));
        addpermhousingjButton.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        addpermhousingjButton.setForeground(new java.awt.Color(255, 255, 255));
        addpermhousingjButton.setText("Add New House For Sale");
        addpermhousingjButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addpermhousingjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addpermhousingjButtonActionPerformed(evt);
            }
        });
        add(addpermhousingjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 570, 260, 30));

        AvailableHousesText.setEditable(false);
        AvailableHousesText.setBackground(new java.awt.Color(0, 0, 0));
        AvailableHousesText.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        AvailableHousesText.setForeground(new java.awt.Color(255, 255, 255));
        AvailableHousesText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        add(AvailableHousesText, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 170, 150, 40));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Lucida Grande", 3, 13)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Available Houses :");
        jLabel1.setOpaque(true);
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 170, 140, 40));

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 3, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Permanent Housing Work Area ");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jLabel2.setOpaque(true);
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 30, 630, -1));

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Overall - Across Organization");
        jLabel4.setFocusable(false);
        jLabel4.setOpaque(true);
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 170, -1, -1));

        txtTotalRequests.setBackground(new java.awt.Color(0, 0, 0));
        txtTotalRequests.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtTotalRequests.setForeground(new java.awt.Color(255, 255, 255));
        txtTotalRequests.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtTotalRequests.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtTotalRequests.setFocusable(false);
        txtTotalRequests.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        txtTotalRequests.setOpaque(true);
        add(txtTotalRequests, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 220, 75, 45));

        txtAccepted.setBackground(new java.awt.Color(0, 0, 0));
        txtAccepted.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtAccepted.setForeground(new java.awt.Color(255, 255, 255));
        txtAccepted.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtAccepted.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtAccepted.setFocusable(false);
        txtAccepted.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        txtAccepted.setOpaque(true);
        add(txtAccepted, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 220, 75, 45));

        txtRejected.setBackground(new java.awt.Color(0, 0, 0));
        txtRejected.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtRejected.setForeground(new java.awt.Color(255, 255, 255));
        txtRejected.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtRejected.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtRejected.setFocusable(false);
        txtRejected.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        txtRejected.setOpaque(true);
        add(txtRejected, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 300, 75, 45));

        txtPending.setBackground(new java.awt.Color(0, 0, 0));
        txtPending.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtPending.setForeground(new java.awt.Color(255, 255, 255));
        txtPending.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtPending.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtPending.setFocusable(false);
        txtPending.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        txtPending.setOpaque(true);
        add(txtPending, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 300, 75, 45));

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Total Requests");
        jLabel3.setFocusable(false);
        jLabel3.setOpaque(true);
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 270, 90, 18));

        jLabel5.setBackground(new java.awt.Color(0, 0, 0));
        jLabel5.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Total Accepted");
        jLabel5.setFocusable(false);
        jLabel5.setOpaque(true);
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 270, 90, 18));

        jLabel6.setBackground(new java.awt.Color(0, 0, 0));
        jLabel6.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Total Rejected");
        jLabel6.setFocusable(false);
        jLabel6.setOpaque(true);
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 350, 90, 18));

        jLabel11.setBackground(new java.awt.Color(0, 0, 0));
        jLabel11.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Total Pending");
        jLabel11.setFocusable(false);
        jLabel11.setOpaque(true);
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 350, 90, 18));

        jLabel10.setBackground(new java.awt.Color(0, 0, 0));
        jLabel10.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("My Requests");
        jLabel10.setFocusable(false);
        jLabel10.setOpaque(true);
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 170, -1, -1));

        txtTotalRequests1.setBackground(new java.awt.Color(0, 0, 0));
        txtTotalRequests1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtTotalRequests1.setForeground(new java.awt.Color(255, 255, 255));
        txtTotalRequests1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtTotalRequests1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtTotalRequests1.setFocusable(false);
        txtTotalRequests1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        txtTotalRequests1.setOpaque(true);
        add(txtTotalRequests1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 220, 75, 45));

        txtAccepted1.setBackground(new java.awt.Color(0, 0, 0));
        txtAccepted1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtAccepted1.setForeground(new java.awt.Color(255, 255, 255));
        txtAccepted1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtAccepted1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtAccepted1.setFocusable(false);
        txtAccepted1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        txtAccepted1.setOpaque(true);
        add(txtAccepted1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 220, 75, 45));

        txtRejected1.setBackground(new java.awt.Color(0, 0, 0));
        txtRejected1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtRejected1.setForeground(new java.awt.Color(255, 255, 255));
        txtRejected1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtRejected1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtRejected1.setFocusable(false);
        txtRejected1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        txtRejected1.setOpaque(true);
        add(txtRejected1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 300, 75, 45));

        txtPending1.setBackground(new java.awt.Color(0, 0, 0));
        txtPending1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtPending1.setForeground(new java.awt.Color(255, 255, 255));
        txtPending1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtPending1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtPending1.setFocusable(false);
        txtPending1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        txtPending1.setOpaque(true);
        add(txtPending1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 300, 75, 45));

        jLabel9.setBackground(new java.awt.Color(0, 0, 0));
        jLabel9.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Total Requests");
        jLabel9.setFocusable(false);
        jLabel9.setOpaque(true);
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 270, 90, 18));

        jLabel8.setBackground(new java.awt.Color(0, 0, 0));
        jLabel8.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Total Accepted");
        jLabel8.setFocusable(false);
        jLabel8.setOpaque(true);
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 270, 90, 18));

        jLabel7.setBackground(new java.awt.Color(0, 0, 0));
        jLabel7.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Total Rejected");
        jLabel7.setFocusable(false);
        jLabel7.setOpaque(true);
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 350, 90, 18));

        jLabel12.setBackground(new java.awt.Color(0, 0, 0));
        jLabel12.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Total Pending");
        jLabel12.setFocusable(false);
        jLabel12.setOpaque(true);
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 350, 90, 18));

        txtWelcome.setBackground(new java.awt.Color(102, 102, 102));
        txtWelcome.setOpaque(true);
        add(txtWelcome, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 80, 770, 40));

        btnViewAllVeterans.setBackground(new java.awt.Color(0, 0, 0));
        btnViewAllVeterans.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        btnViewAllVeterans.setForeground(new java.awt.Color(255, 255, 255));
        btnViewAllVeterans.setText("View Citizen");
        btnViewAllVeterans.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnViewAllVeterans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAllVeteransActionPerformed(evt);
            }
        });
        add(btnViewAllVeterans, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 570, 260, 30));

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/house2.jpeg"))); // NOI18N
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 650));
    }// </editor-fold>//GEN-END:initComponents

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            return;
        }

        WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
        request.setReceiver(userAccount);
        request.setStatus("Pending");
        populateTable();

    }//GEN-LAST:event_assignJButtonActionPerformed


    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            return;
        }

        PermHousingRequest request = (PermHousingRequest) workRequestJTable.getValueAt(selectedRow, 0);

        request.setStatus("Processing");

        ProcessPermWorkRequestJPanel processWorkRequestJPanel = new ProcessPermWorkRequestJPanel(processContainer, request, business);
        processContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) processContainer.getLayout();
        layout.next(processContainer);

    }//GEN-LAST:event_processJButtonActionPerformed

    private void addpermhousingjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addpermhousingjButtonActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) processContainer.getLayout();
        processContainer.add("AddListingJPanel", new AddListingJPanel(processContainer, userAccount, permHousingOrganization, enterprise, cd, business));
        layout.next(processContainer);
    }//GEN-LAST:event_addpermhousingjButtonActionPerformed

    private void btnViewAllVeteransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAllVeteransActionPerformed
        // TODO add your handling code here:
        ViewAllCitizens vc = new ViewAllCitizens(processContainer, business, cd);
        processContainer.add("ViewAllCitizens", vc);
        CardLayout layout = (CardLayout) processContainer.getLayout();
        layout.next(processContainer);
    }//GEN-LAST:event_btnViewAllVeteransActionPerformed

    public void populateTable() {
        int totalRequests = 0;
        int acceptedRequests = 0;
        int rejectedRequests = 0;
        int pendingRequests = 0;
        int totalRequestsUser = 0;
        int acceptedRequestsUser = 0;
        int rejectedRequestsUser = 0;
        int pendingRequestsUser = 0;
        int unassignedReq = 0;

        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);
        System.out.println("Inside PopulateTable");

        for (WorkRequest request : permHousingOrganization.getWorkQueue().getWorkRequestList()) {
            System.out.println("Inside LOOP");
            if (request instanceof PermHousingRequest) {

                Object[] row = new Object[8];
                row[0] = request;
                row[1] = request.getSender();
                row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getEmployeeName();
                row[3] = ((PermHousingRequest) request).getArea();
                row[4] = ((PermHousingRequest) request).getCity();
                row[5] = ((PermHousingRequest) request).getDoorNumber();
                row[6] = ((PermHousingRequest) request).getPinCode();
                row[7] = ((PermHousingRequest) request).getStatus();

                if (request.getReceiver() == null) {
                    unassignedReq = unassignedReq + 1;
                } else if (request.getReceiver().getEmployee().equals(userAccount.getEmployee())) {
                    totalRequestsUser = totalRequestsUser + 1;
                    if (request.getStatus().equals("Accepted")) {
                        acceptedRequestsUser = acceptedRequestsUser + 1;
                    } else if (request.getStatus().equals("Rejected")) {
                        rejectedRequestsUser = rejectedRequestsUser + 1;
                    } else {
                        pendingRequestsUser = pendingRequestsUser + 1;
                    }

                }

                if (request.getStatus().equals("Accepted")) {
                    acceptedRequests = acceptedRequests + 1;
                } else if (request.getStatus().equals("Rejected")) {
                    rejectedRequests = rejectedRequests + 1;
                } else {
                    pendingRequests = pendingRequests + 1;
                }

                model.addRow(row);

            }
            txtTotalRequests.setText(Integer.toString(totalRequests));
            txtAccepted.setText(Integer.toString(acceptedRequests));
            txtRejected.setText(Integer.toString(rejectedRequests));
            txtPending.setText(Integer.toString(pendingRequests));

            txtTotalRequests1.setText(Integer.toString(totalRequestsUser));
            txtAccepted1.setText(Integer.toString(acceptedRequestsUser));
            txtRejected1.setText(Integer.toString(rejectedRequestsUser));
            txtPending1.setText(Integer.toString(pendingRequestsUser));

            txtWelcome.setText("Welcome back, " + userAccount.getEmployee().getEmployeeName() + ". There are " + (Integer.toString(unassignedReq)) + " unassigned request(s) for review & " + (Integer.toString(pendingRequests)) + " in your queue.");

            int availability = business.getHld().getTotal_count();
            for (HouseListings hs : business.getHld().getHouseListing_Dir()) {
                if (hs.getAvailability() == 1) {
                    availability = availability - 1;
                }
            }
            AvailableHousesText.setText(Integer.toString(availability));
            

        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AvailableHousesText;
    private javax.swing.JButton addpermhousingjButton;
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton btnViewAllVeterans;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JLabel txtAccepted;
    private javax.swing.JLabel txtAccepted1;
    private javax.swing.JLabel txtPending;
    private javax.swing.JLabel txtPending1;
    private javax.swing.JLabel txtRejected;
    private javax.swing.JLabel txtRejected1;
    private javax.swing.JLabel txtTotalRequests;
    private javax.swing.JLabel txtTotalRequests1;
    private javax.swing.JLabel txtWelcome;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
